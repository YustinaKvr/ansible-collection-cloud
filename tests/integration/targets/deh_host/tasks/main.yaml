---
# author: @tischrei
- name: DeH Host tests
  module_defaults:
    opentelekomcloud.cloud.deh_host:
      cloud: "{{ test_cloud }}"
    opentelekomcloud.cloud.deh_host_info:
      cloud: "{{ test_cloud }}"

  block:
    - name: Set random prefix
      ansible.builtin.set_fact:
        prefix: "{{ 99999999 | random | to_uuid | hash('md5') }}"

    - name: Set initial facts
      ansible.builtin.set_fact:
        deh_host_name: "{{ ( prefix + '_deh-host') }}"

    - name: Allocate DeH host - check_mode
      opentelekomcloud.cloud.deh_host:
        availability_zone: eu-de-01
        host_type: s2-medium
        name: "{{ deh_host_name }}"
        state: present
        quantity: 1
        tags:
          - key: key1
            value: value1
          - key: key2
            value: value2
      check_mode: true
      register: deh_ch

    - name: assert result
      ansible.builtin.assert:
        that:
          - deh_ch is success
          - deh_ch is changed

    - name: Allocate DeH host
      opentelekomcloud.cloud.deh_host:
        availability_zone: eu-de-01
        host_type: s2-medium
        name: "{{ deh_host_name }}"
        state: present
        quantity: 1
        tags:
          - key: key1
            value: value1
          - key: key2
            value: value2
      register: deh

    - name: assert result
      ansible.builtin.assert:
        that:
          - deh is success
          - deh.deh_host.dedicated_host_ids[0] is defined

    - name: Modify DeH host - check mode
      opentelekomcloud.cloud.deh_host:
        id: "{{ deh.deh_host.dedicated_host_ids[0] }}"
        auto_placement: false
      check_mode: true
      when:
        - deh is defined
      register: deh_ch

    - name: assert result
      ansible.builtin.assert:
        that:
          - deh_ch is success

    - name: Modify DeH host
      opentelekomcloud.cloud.deh_host:
        id: "{{ deh.deh_host.dedicated_host_ids[0] }}"
        auto_placement: false
      when:
        - deh is defined
      register: deh

    - name: assert result
      ansible.builtin.assert:
        that:
          - deh is success

    - name: Query not existing ECS on dedicated host
      opentelekomcloud.cloud.deh_server_info:
        dedicated_host: "{{ deh.deh_host.id }}"
      when:
        - deh is defined
      register: server

    - name: assert result
      ansible.builtin.assert:
        that:
          - server is success
          - server.deh_servers is defined

  always:
    - name: Cleanup
      block:
        - name: Drop existing DeH host
          opentelekomcloud.cloud.deh_host:
            name: "{{ deh.deh_host.name }}"
            state: absent
          register: deh
          failed_when: false
