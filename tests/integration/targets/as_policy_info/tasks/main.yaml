---
- name: AS Policy Info tests
  module_defaults:
    opentelekomcloud.cloud.as_policy_info:
      cloud: "{{ test_cloud }}"
    opentelekomcloud.cloud.as_group:
      cloud: "{{ test_cloud }}"
    openstack.cloud.keypair:
      cloud: "{{ test_cloud }}"
    openstack.cloud.network:
      cloud: "{{ test_cloud }}"
    openstack.cloud.subnet:
      cloud: "{{ test_cloud }}"
    openstack.cloud.router:
      cloud: "{{ test_cloud }}"
  block:
    - name: Set random prefix
      ansible.builtin.set_fact:
        prefix: "{{ 999999 | random | to_uuid | hash('md5') }}"

    - name: Set initial facts
      ansible.builtin.set_fact:
        as_group_name: "{{ ( prefix + '_as_group') }}"
        key_name: "{{ ( prefix + '_key') }}"
        network_name: "{{ ( prefix + '_network') }}"
        subnet_name: "{{ ( prefix + '_subnet') }}"
        router_name: "{{ ( prefix + '_router') }}"

    - name: Create keypair
      openstack.cloud.keypair:
        name: "{{ key_name }}"

    - name: Create network
      openstack.cloud.network:
        name: "{{ network_name }}"
        state: present
      register: network

    - name: Create subnet
      openstack.cloud.subnet:
        name: "{{ subnet_name }}"
        state: present
        network_name: "{{ network.network.name }}"
        cidr: "192.168.110.0/24"
        dns_nameservers: "{{ ['100.125.4.25', '8.8.8.8'] }}"
      register: subnet

    - name: Create router
      openstack.cloud.router:
        name: "{{ router_name }}"
        state: present
        network: admin_external_net
        enable_snat: true
        interfaces:
          - net: "{{ network.network.name }}"
            subnet: "{{ subnet.subnet.name }}"
      register: router

    - name: Create as group
      opentelekomcloud.cloud.as_group:
        scaling_group:
          name: "{{ as_group_name }}"
        networks: [{'id': "{{ network.network.id }}"}]
        router: "{{ router.router.id }}"
      register: as_group

    - name: Get list of AS Policies using as group id
      opentelekomcloud.cloud.as_policy_info:
        scaling_group: "{{ as_group.as_group.id }}"
      register: as_policies

    - name: assert result
      ansible.builtin.assert:
        that:
          - as_policies is success
          - as_policies is not changed
          - as_policies['scaling_policies']|length == 0

    - name: Get list of AS Policies using as group name
      opentelekomcloud.cloud.as_policy_info:
        scaling_group: "{{ as_group.as_group.name }}"
      register: as_policies

    - name: assert result
      ansible.builtin.assert:
        that:
          - as_policies is success
          - as_policies is not changed
          - as_policies['scaling_policies']|length == 0

    - name: Get error message that required parameter is missing
      opentelekomcloud.cloud.as_policy_info:
      register: as_policies
      failed_when: 'as_policies.msg != "missing required arguments: scaling_group"'

    - name: Get error when AS group id is missing
      opentelekomcloud.cloud.as_policy_info:
        scaling_group:
      register: as_policies
      failed_when: 'as_policies.msg != "Scaling group is missing"'

  always:
    - name: Cleanup
      block:
        - name: Delete as group
          opentelekomcloud.cloud.as_group:
            scaling_group:
              name: "{{ as_group_name }}"
            state: absent
            force_delete: true
            wait: true
          register: dropped_as_group
          failed_when: false

        - name: Delete keypair
          openstack.cloud.keypair:
            name: "{{ key_name }}"
            state: absent
          failed_when: false

        - name: Drop existing router
          openstack.cloud.router:
            name: "{{ router.router.name }}"
            state: absent
          failed_when: false

        - name: Drop existing subnet
          openstack.cloud.subnet:
            name: "{{ subnet.subnet.name }}"
            state: absent
          failed_when: false

        - name: Drop existing network
          openstack.cloud.network:
            name: "{{ network.network.name }}"
            state: absent
          failed_when: false
