---
- name: Volume Backup tests
  module_defaults:
    openstack.cloud.volume:
      cloud: "{{ test_cloud }}"
    opentelekomcloud.cloud.volume_backup:
      cloud: "{{ test_cloud }}"
    opentelekomcloud.cloud.volume_snapshot_info:
      cloud: "{{ test_cloud }}"
    openstack.cloud.volume_snapshot:
      cloud: "{{ test_cloud }}"
  block:
    - name: Set random prefix
      ansible.builtin.set_fact:
        prefix: "{{ 999999 | random | to_uuid | hash('md5') }}"

    - name: Set initial facts
      ansible.builtin.set_fact:
        display_name: "{{ ( prefix + '-test-volume') }}"
        backup_name: "{{ ( prefix + '-test-backup') }}"
        availability_zone: "eu-de-01"

    - name: 1 create volume
      openstack.cloud.volume:
        size: 1
        availability_zone: "{{ availability_zone }}"
        display_name: "{{ display_name }}"
        state: present
      register: vol

    - name: 2 assert result of volume creating
      ansible.builtin.assert:
        that:
          - vol is success
          - vol is changed
          - vol.volume is defined

    - name: 3 create backup of the volume
      opentelekomcloud.cloud.volume_backup:
        name: "{{ backup_name }}"
        volume: "{{ display_name }}"
        state: present
      register: bckp

    - name: 4 assert result
      ansible.builtin.assert:
        that:
          - bckp is success
          - bckp is changed
          - bckp.volume_backup is defined

    - name: 5 check whether snapshot had been created
      opentelekomcloud.cloud.volume_snapshot_info:
        volume: "{{ vol['id'] }}"
        status: available
      register: snapshot

    - name: 6 assert result for snapshot
      ansible.builtin.assert:
        that:
          - snapshot is success
          - snapshot.volume_snapshots is defined
          - snapshot.volume_snapshots | length > 0

    - name: 7 set fact to found proper snapshot
      ansible.builtin.set_fact:
        snapshot_name: "{{ snapshot['volume_snapshots'][0]['name'] }}"

  always:
    - name: Cleanup
      block:
        - name: 8 delete snapshot
          openstack.cloud.volume_snapshot:
            volume: "{{ display_name }}"
            name: "{{ snapshot_name }}"
            state: absent
          register: delsh
          when: "snapshot_name is defined"

        - name: 10 delete backup
          opentelekomcloud.cloud.volume_backup:
            name: "{{ backup_name }}"
            state: absent
          register: delbckp
          when: "backup_name is defined"

        - name: 11 assert result of deliting
          ansible.builtin.assert:
            that:
              - delbckp is success
              - delbckp is not changed

        - name: 12 delete volume
          openstack.cloud.volume:
            name: "{{ display_name }}"
            state: absent
          register: delvol

        - name: 13 assert result of deleting volume
          ansible.builtin.assert:
            that:
              - delvol is success
              - delvol is changed
