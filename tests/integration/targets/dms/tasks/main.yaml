- name: DMS tests
  block:
    - name: Set random prefix
      ansible.builtin.set_fact:
        prefix: "{{ 99999999 | random | to_uuid | hash('md5') }}"

    - name: Set facts
      ansible.builtin.set_fact:
        queue_name: "{{ ( 'a' + prefix + '-queue' ) }}"
        group_name: "{{ ( 'group_test' ) }}"
        instance_name: "{{ ( 'a' + prefix + '-instance' ) }}"
        network_name: "{{ ( prefix + '-dmsnetwork' ) }}"
        subnet_name: "{{ ( prefix + '-dmssubnet' ) }}"
        router_name: "{{ ( prefix + '-dmsrouter' ) }}"
        sg_name: "{{ ( prefix + '-dmssg' ) }}"

    - name: DMS Queue
      opentelekomcloud.cloud.dms_queue:
        name: '{{ queue_name }}'
        state: present
      register: dms_queue
      check_mode: false

    - name: DMS Queue Group
      opentelekomcloud.cloud.dms_queue_group:
        queue_name: '{{ queue_name }}'
        group_name: '{{ group_name }}'
        state: present
      register: dms_queue_group
      check_mode: false

    - name: List DMS Queues
      opentelekomcloud.cloud.dms_queue_info:
        queue: '{{ queue_name }}'
      register: zone_net

    - name: List DMS Queue Group Info
      opentelekomcloud.cloud.dms_queue_group_info:
        queue: '{{ queue_name }}'
        include_deadletter: true
      register: zone_net

    - name: Send Messages
      opentelekomcloud.cloud.dms_message:
        queue: '{{ queue_name }}'
        messages:
          - body: 'test1'
            attributes:
              attribute1: 'value1'
              attribute2: 'value2'
          - body: 'test2'
            attributes:
              attribute1: 'value3'
              attribute2: 'value4'
        task: send
      register: dms_mess_send

    - name: List DMS Queue Group Info
      opentelekomcloud.cloud.dms_queue_group_info:
        queue: '{{ queue_name }}'
        include_deadletter: true
      register: zone_net

    - name: Consume Messages
      opentelekomcloud.cloud.dms_message:
        queue: '{{ queue_name }}'
        group: '{{ group_name }}'
        task: consume
        ack: false
      register: dms_mess_cons

    - name: List DMS Instance Info
      opentelekomcloud.cloud.dms_instance_info:
      register: dms_instance

    - name: Create network for DMS Instance
      openstack.cloud.network:
        name: "{{ network_name }}"
        state: present
      register: dms_net

    - name: Create subnet for DMS Instance
      openstack.cloud.subnet:
        name: "{{ subnet_name }}"
        state: present
        network_name: "{{ dms_net.network.name }}"
        cidr: "192.168.110.0/24"
        dns_nameservers: "{{ ['100.125.4.25', '8.8.8.8'] }}"
      register: dms_subnet

    - name: Create Router for DMS Instance
      openstack.cloud.router:
        name: "{{ router_name }}"
        state: present
        network: admin_external_net
        enable_snat: false
        interfaces:
          - net: "{{ dms_net.network.name }}"
            subnet: "{{ dms_subnet.subnet.name }}"
      register: dms_router

    - name: Create Security Group for DMS Instance
      openstack.cloud.security_group:
        name: "{{ sg_name }}"
      register: dms_sg

  always:
    - name: Cleanup
      block:
        - name: DMS Delete Queue Group
          opentelekomcloud.cloud.dms_queue_group:
            queue_name: '{{ queue_name }}'
            group_name: '{{ group_name }}'
            state: absent
          register: dms_queue_group_rm
          check_mode: false
          failed_when: false

        - name: Delete Queue
          opentelekomcloud.cloud.dms_queue:
            name: '{{ queue_name }}'
            state: absent
          register: dms_queue_rm
          check_mode: false
          failed_when: false

        - name: Delete Security Group
          openstack.cloud.security_group:
            name: "{{ sg_name }}"
            state: absent
          register: dms_sg
          failed_when: false

        - name: Drop existing Router
          openstack.cloud.router:
            name: "{{ router_name }}"
            state: absent
          register: dns_rout_dr
          failed_when: false

        - name: Drop existing subnet
          openstack.cloud.subnet:
            name: "{{ subnet_name }}"
            state: absent
          register: dns_subnet_dr
          failed_when: false

        - name: Drop existing network
          openstack.cloud.network:
            name: "{{ network_name }}"
            state: absent
          register: dns_net_dr
          failed_when: false
