---
- name: AS Policy tests
  module_defaults:
    opentelekomcloud.cloud.as_policy:
      cloud: "{{ test_cloud }}"
    opentelekomcloud.cloud.as_policy_info:
      cloud: "{{ test_cloud }}"
    opentelekomcloud.cloud.as_group:
      cloud: "{{ test_cloud }}"
    opentelekomcloud.cloud.ces_alarms:
      cloud: "{{ test_cloud }}"
    opentelekomcloud.cloud.floating_ip:
      cloud: "{{ test_cloud }}"
    openstack.cloud.network:
      cloud: "{{ test_cloud }}"
    openstack.cloud.subnet:
      cloud: "{{ test_cloud }}"
    openstack.cloud.router:
      cloud: "{{ test_cloud }}"
  block:
    - name: Set random prefix
      ansible.builtin.set_fact:
        prefix: "{{ 999999 | random | to_uuid | hash('md5') }}"

    - name: Set initial facts
      ansible.builtin.set_fact:
        as_group_name: "{{ ( prefix + '_as_group') }}"
        as_policy_name: "{{ prefix + '_as_policy' }}"
        alarm_name: "{{ prefix + '_alarm' }}"
        network_name: "{{ ( prefix + '_network') }}"
        subnet_name: "{{ ( prefix + '_subnet') }}"
        router_name: "{{ ( prefix + '_router') }}"

    - name: Create network
      openstack.cloud.network:
        name: "{{ network_name }}"
        state: present
      register: network

    - name: Assign Floating IP
      opentelekomcloud.cloud.floating_ip:
        network: admin_external_net
      register: fl

    - name: Set additional facts
      ansible.builtin.set_fact:
        fl_ip: "{{ fl.floating_ip.floating_ip_address }}"
        fl_ip_id: "{{ fl.floating_ip.id }}"

    - name: Creating an Alarm
      opentelekomcloud.cloud.ces_alarms:
        alarm_name: "{{ alarm_name }}"
        state: present
        metric:
          namespace: "SYS.VPC"
          dimensions:
            - name: "publicip_id"
              value: "{{ fl_ip_id }}"
          metric_name: "down_stream"
        condition:
          period: 300
          filter: average
          comparison_operator: ">="
          value: 6
          unit: "B"
          count: 1
        alarm_enabled: true
        alarm_action_enabled: false
      register: alarm

    - name: Create subnet
      openstack.cloud.subnet:
        name: "{{ subnet_name }}"
        state: present
        network_name: "{{ network.network.name }}"
        cidr: "192.168.110.0/24"
        dns_nameservers: "{{ ['100.125.4.25', '8.8.8.8'] }}"
      register: subnet

    - name: Create router
      openstack.cloud.router:
        name: "{{ router_name }}"
        state: present
        network: admin_external_net
        enable_snat: true
        interfaces:
          - net: "{{ network.network.name }}"
            subnet: "{{ subnet.subnet.name }}"
      register: router

    - name: Create AS Group
      opentelekomcloud.cloud.as_group:
        scaling_group:
          name: "{{ as_group_name }}"
        networks: [{'id': "{{ network.network.id }}"}]
        router: "{{ router.router.id }}"
      register: as_group

    - name: Create AS Policy - check_mode
      opentelekomcloud.cloud.as_policy:
        scaling_group: "{{ as_group_name }}"
        scaling_policy: "{{ as_policy_name }}"
        scaling_policy_type: "alarm"
        alarm: "{{ alarm_name }}"
        state: "present"
      check_mode: true
      register: as_policy

    - name: assert result
      ansible.builtin.assert:
        that:
          - as_policy is changed

    - name: Create AS policy
      opentelekomcloud.cloud.as_policy:
        scaling_group: "{{ as_group_name }}"
        scaling_policy: "{{ as_policy_name }}"
        scaling_policy_type: "alarm"
        alarm: "{{ alarm_name }}"
        state: "present"
      register: as_policy

    - name: assert result
      ansible.builtin.assert:
        that:
          - as_policy is success
          - as_policy is changed
          - 'as_policy.msg == "Scaling policy {{ as_policy_name }} was created"'

    - name: Create policy when it already exists
      opentelekomcloud.cloud.as_policy:
        scaling_group: "{{ as_group_name }}"
        scaling_policy: "{{ as_policy_name }}"
        scaling_policy_type: "alarm"
        alarm: "{{ alarm_name }}"
        state: "present"
      register: as_policy
      failed_when: 'as_policy.msg != "Scaling policy {{ as_policy_name }} exists"'

    - name: Get list of AS Policies
      opentelekomcloud.cloud.as_policy_info:
        scaling_group: "{{ as_group.as_group.id }}"
      register: as_policies

    - name: assert result
      ansible.builtin.assert:
        that:
          - as_policies is success
          - as_policies['scaling_policies']|length == 1

    - name: Update AS policy (add scaling_policy_action)
      opentelekomcloud.cloud.as_policy:
        scaling_group: "{{ as_group_name }}"
        scaling_policy: "{{ as_policy_name }}"
        scaling_policy_type: "alarm"
        alarm: "{{ alarm_name }}"
        state: "present"
        scaling_policy_action:
          operation: "add"
          instance_number: 1
      register: as_policy

    - name: assert result
      ansible.builtin.assert:
        that:
          - as_policy is success
          - as_policy is changed
          - 'as_policy.msg == "Scaling policy {{ as_policy_name }} was updated"'

    - name: Delete AS policy -check mode
      opentelekomcloud.cloud.as_policy:
        scaling_group: "{{ as_group_name }}"
        scaling_policy: "{{ as_policy_name }}"
        state: "absent"
      register: as_policy
      check_mode: true

    - name: assert result
      ansible.builtin.assert:
        that:
          - as_policy is changed

    - name: Delete AS policy
      opentelekomcloud.cloud.as_policy:
        scaling_group: "{{ as_group_name }}"
        scaling_policy: "{{ as_policy_name }}"
        state: "absent"
      register: as_policy

    - name: assert result
      ansible.builtin.assert:
        that:
          - as_policy is success
          - as_policy is changed
          - 'as_policy.msg == "Scaling policy {{ as_policy_name }} was deleted"'

    - name: Get list of AS Policies
      opentelekomcloud.cloud.as_policy_info:
        scaling_group: "{{ as_group.as_group.id }}"
      register: as_policies

    - name: assert result
      ansible.builtin.assert:
        that:
          - as_policies is success
          - as_policies['scaling_policies']|length == 0

    - name: Delete AS policy that already deleted
      opentelekomcloud.cloud.as_policy:
        scaling_group: "{{ as_group_name }}"
        scaling_policy: "{{ as_policy_name }}"
        state: "absent"
      register: as_policy
      failed_when: 'as_policy.msg != "Scaling policy {{ as_policy_name }} not found"'

  always:
    - name: Cleanup
      block:
        - name: Delete AS group
          opentelekomcloud.cloud.as_group:
            scaling_group:
              name: "{{ as_group_name }}"
            state: absent
            force_delete: true
            wait: true
          register: dropped_as_group
          failed_when: false

        - name: Drop alarm
          opentelekomcloud.cloud.ces_alarms:
            alarm_name: "{{ alarm_name }}"
            state: absent
          failed_when: false

        - name: Drop floating ip
          opentelekomcloud.cloud.floating_ip:
            floating_ip_address: "{{ fl_ip }}"
            state: absent
            purge: true
          failed_when: false

        - name: Drop existing router
          openstack.cloud.router:
            name: "{{ router.router.name }}"
            state: absent
          failed_when: false

        - name: Drop existing subnet
          openstack.cloud.subnet:
            name: "{{ subnet.subnet.name }}"
            state: absent
          failed_when: false

        - name: Drop existing network
          openstack.cloud.network:
            name: "{{ network.network.name }}"
            state: absent
          failed_when: false
